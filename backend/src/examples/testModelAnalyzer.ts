/**
 * TESTE DO MODEL ANALYZER
 * 
 * Script para demonstrar o funcionamento do sistema de an√°lise de modelos
 * usando os documentos exemplares existentes.
 */

import { ModelAnalyzer } from '../services/modelAnalyzer.js';
import fs from 'fs/promises';
import path from 'path';

async function testModelAnalyzer() {
  console.log('üöÄ INICIANDO TESTE DO MODEL ANALYZER\n');
  console.log('=' .repeat(70));
  
  const analyzer = new ModelAnalyzer();
  
  // Caminhos dos modelos existentes
  const modelFiles = [
    'extracted_manifestacao_intimacao.txt',
    'extracted_manifestacao_favoravel.txt',
    'extracted_manifestacao_honorarios.txt'
  ];
  
  try {
    // Ler os arquivos
    console.log('\nüìÇ Carregando modelos...\n');
    const models: string[] = [];
    
    for (const fileName of modelFiles) {
      const filePath = path.join(process.cwd(), fileName);
      try {
        const content = await fs.readFile(filePath, 'utf-8');
        models.push(content);
        console.log(`‚úÖ ${fileName} carregado (${content.length} caracteres)`);
      } catch (error) {
        console.log(`‚ùå Erro ao carregar ${fileName}:`, error);
      }
    }
    
    if (models.length === 0) {
      console.log('\n‚ùå Nenhum modelo encontrado!');
      return;
    }
    
    console.log(`\n‚úÖ ${models.length} modelos carregados com sucesso!\n`);
    console.log('=' .repeat(70));
    
    // Analisar modelos
    console.log('\nüî¨ ANALISANDO MODELOS...\n');
    const { analyses, patterns } = await analyzer.analyzeMultipleModels(models, modelFiles);
    
    // Exibir resultados
    console.log('\n' + '=' .repeat(70));
    console.log('üìä RESULTADOS DA AN√ÅLISE\n');
    
    // 1. An√°lises individuais
    console.log('1Ô∏è‚É£  AN√ÅLISE INDIVIDUAL DOS MODELOS:\n');
    for (const analysis of analyses) {
      console.log(`üìÑ ${analysis.fileName}`);
      console.log(`   Palavras: ${analysis.wordCount}`);
      console.log(`   Qualidade: ${analysis.qualityScore.toFixed(1)}/10`);
      console.log(`   Se√ß√µes: ${analysis.structure.sections.length}`);
      console.log(`   Cita√ß√µes legais: ${analysis.legalCitations.length}`);
      console.log(`   Entidades: ${analysis.entities.total}`);
      console.log(`   Formalidade: ${analysis.style.formalityScore.toFixed(1)}/10`);
      console.log(`   Tecnicidade: ${analysis.style.technicalityScore.toFixed(1)}/10\n`);
    }
    
    // 2. Padr√µes comuns
    console.log('=' .repeat(70));
    console.log('\n2Ô∏è‚É£  PADR√ïES COMUNS IDENTIFICADOS:\n');
    
    // Se√ß√µes essenciais
    const essentialSections = patterns.sections.filter(s => s.isEssential);
    console.log(`üèóÔ∏è  SE√á√ïES ESSENCIAIS (aparecem em 100% dos modelos):`);
    if (essentialSections.length > 0) {
      essentialSections.forEach(section => {
        console.log(`   ‚úì ${section.name}`);
        console.log(`     Posi√ß√£o m√©dia: ${(section.avgPosition * 100).toFixed(0)}% do documento`);
        console.log(`     Comprimento m√©dio: ${Math.round(section.avgLength)} palavras\n`);
      });
    } else {
      console.log('   (Nenhuma se√ß√£o aparece em 100% dos modelos)\n');
    }
    
    // Se√ß√µes frequentes
    const frequentSections = patterns.sections.filter(s => !s.isEssential && s.frequency >= 0.6);
    console.log(`üìã SE√á√ïES FREQUENTES (aparecem em 60%+ dos modelos):`);
    frequentSections.slice(0, 5).forEach(section => {
      console.log(`   ‚úì ${section.name} (${(section.frequency * 100).toFixed(0)}%)`);
    });
    
    // Frases de abertura
    console.log(`\nüí¨ FRASES DE ABERTURA T√çPICAS:`);
    patterns.phrases.opening.slice(0, 3).forEach(p => {
      console.log(`   "${p.phrase.substring(0, 80)}..." (${p.frequency}x)`);
    });
    
    // Frases de fechamento
    console.log(`\nüèÅ FRASES DE FECHAMENTO T√çPICAS:`);
    patterns.phrases.closing.slice(0, 3).forEach(p => {
      console.log(`   "${p.phrase.substring(0, 80)}..." (${p.frequency}x)`);
    });
    
    // Cita√ß√µes legais mais comuns
    console.log(`\n‚öñÔ∏è  CITA√á√ïES LEGAIS MAIS COMUNS:`);
    patterns.citations.slice(0, 5).forEach(citation => {
      console.log(`   ${citation.text} (${citation.count}x)`);
    });
    
    // 3. Estilo m√©dio
    console.log('\n' + '=' .repeat(70));
    console.log('\n3Ô∏è‚É£  ESTILO M√âDIO DOS MODELOS:\n');
    console.log(`   Formalidade: ${patterns.style.formality.toFixed(1)}/10`);
    console.log(`   Tecnicidade: ${patterns.style.technicalLevel.toFixed(1)}/10`);
    console.log(`   Densidade de informa√ß√£o: ${patterns.style.infoDensity.toFixed(4)}`);
    console.log(`   Comprimento m√©dio: ${patterns.style.avgWordCount} palavras`);
    console.log(`   Senten√ßa m√©dia: ${patterns.style.avgSentenceLength.toFixed(1)} palavras`);
    
    // 4. Vocabul√°rio
    console.log('\n' + '=' .repeat(70));
    console.log('\n4Ô∏è‚É£  VOCABUL√ÅRIO IDENTIFICADO:\n');
    
    console.log(`üìù PALAVRAS MAIS COMUNS (top 10):`);
    patterns.vocabulary.commonWords.slice(0, 10).forEach((w, i) => {
      console.log(`   ${i + 1}. ${w.word} (${w.count}x)`);
    });
    
    console.log(`\nüéì TERMOS T√âCNICOS (top 10):`);
    patterns.vocabulary.technicalTerms.slice(0, 10).forEach((t, i) => {
      console.log(`   ${i + 1}. ${t.term} (${t.count}x)`);
    });
    
    console.log(`\nüîó VERBOS JUR√çDICOS T√çPICOS:`);
    patterns.vocabulary.legalVerbs.forEach(verb => {
      console.log(`   ‚úì ${verb}`);
    });
    
    console.log(`\nüîÑ CONECTIVOS T√çPICOS:`);
    patterns.vocabulary.connectives.forEach(conn => {
      console.log(`   ‚úì "${conn}"`);
    });
    
    // 5. Resumo final
    console.log('\n' + '=' .repeat(70));
    console.log('\n‚úÖ RESUMO FINAL:\n');
    console.log(`   Modelos analisados: ${analyses.length}`);
    console.log(`   Qualidade m√©dia: ${(analyses.reduce((s, a) => s + a.qualityScore, 0) / analyses.length).toFixed(1)}/10`);
    console.log(`   Se√ß√µes comuns identificadas: ${patterns.sections.length}`);
    console.log(`   Frases-padr√£o encontradas: ${patterns.phrases.opening.length + patterns.phrases.closing.length + patterns.phrases.transition.length}`);
    console.log(`   Cita√ß√µes legais √∫nicas: ${patterns.citations.length}`);
    console.log(`   Vocabul√°rio t√©cnico: ${patterns.vocabulary.technicalTerms.length} termos`);
    
    console.log('\n' + '=' .repeat(70));
    console.log('\nüéâ AN√ÅLISE CONCLU√çDA COM SUCESSO!\n');
    
    // Salvar resultados em JSON para inspe√ß√£o
    const outputPath = path.join(process.cwd(), 'model_analysis_results.json');
    await fs.writeFile(outputPath, JSON.stringify({ analyses, patterns }, null, 2));
    console.log(`üìÅ Resultados salvos em: ${outputPath}\n`);
    
  } catch (error) {
    console.error('\n‚ùå Erro durante an√°lise:', error);
  }
}

// Executar teste
testModelAnalyzer().catch(console.error);
