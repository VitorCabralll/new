generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===== AGENTES DO SISTEMA (Fixos e Universais) =====
model SystemAgent {
  id                String   @id @default(cuid())
  role              String   @unique // "analista", "planejador", "revisor"
  name              String
  systemInstruction String   // Prompt genérico e universal
  version           String   @default("1.0")

  // Configuração
  model             String   @default("gemini-2.0-flash")
  temperature       Float    @default(0.3)
  maxTokens         Int      @default(8192)

  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([role])
  @@index([isActive])
}

// ===== AGENTES DO USUÁRIO (Treináveis) =====
model UserAgent {
  id          String   @id @default(cuid())
  userId      String   // Dono do agente
  name        String   // "Meu Agente - Habilitação de Crédito"
  description String?

  // Configuração base
  category    String   // "Habilitação de Crédito", "Recurso Criminal", etc.
  basePrompt  String   // Instrução base do usuário

  // System instruction gerada (do treinamento)
  systemInstruction String

  // Status de treinamento
  isTrained        Boolean @default(false)
  trainingExamples Int     @default(0)
  lastTrainedAt    DateTime?

  // Métricas
  version          String   @default("1.0")
  qualityScore     Float?   // Score médio das gerações
  usageCount       Int      @default(0)
  lastUsed         DateTime?
  successRate      Float?   // % de gerações aceitas

  // Relacionamentos
  trainingDocs     TrainingDocument[]
  templates        AgentTemplate[]
  sessions         LegalSession[]
  requestAudits    RequestAudit[]

  isActive    Boolean  @default(true)
  metadata    String?  // JSON: patterns, validation, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([category])
  @@index([isTrained])
  @@index([isActive])
  @@index([lastUsed])
}

// ===== DOCUMENTOS DE TREINAMENTO =====
model TrainingDocument {
  id            String    @id @default(cuid())
  userAgentId   String
  userAgent     UserAgent @relation(fields: [userAgentId], references: [id], onDelete: Cascade)

  // Arquivo original
  fileName      String
  fileType      String    // "manifestacao", "peticao", "parecer"
  filePath      String?   // Path relativo ao upload
  fileMD5       String
  fileSize      Int

  // Conteúdo
  fullText      String    // Texto completo extraído
  extractedData String    // JSON: { estrutura, seções, linguagem, padrões }

  // Embeddings para busca semântica (futuro)
  embedding     String?   // JSON: vector embeddings

  // Metadados extraídos automaticamente
  metadata      String?   // JSON: { tipo_credito, valor_medio, complexidade, etc. }

  // Análise de qualidade
  qualityScore  Float?    // Score do modelo (0-10)

  // Status
  processed     Boolean   @default(false)
  qualityCheck  String?   // "approved", "rejected", "needs_review"

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userAgentId])
  @@index([fileType])
  @@index([processed])
  @@index([fileMD5])
}

// ===== TEMPLATES EXTRAÍDOS (Padrões Aprendidos) =====
model AgentTemplate {
  id            String    @id @default(cuid())
  userAgentId   String
  userAgent     UserAgent @relation(fields: [userAgentId], references: [id], onDelete: Cascade)

  // Tipo de template
  templateType  String    // "introducao", "fundamentacao", "conclusao", "calculo_divergente", etc.

  // Padrão aprendido
  pattern       String    // Template com placeholders: "{{habilitante}} requer..."
  variables     String    // JSON: ["habilitante", "valor", "processo"]

  // Exemplo original (opcional)
  exampleText   String?   // Trecho original de onde foi extraído

  // Metadados
  confidence    Float     @default(0.5) // Confiança do padrão (0-1)
  usageCount    Int       @default(0)
  successRate   Float?    // Taxa de sucesso quando usado

  // Contexto de uso
  applicableWhen String?  // JSON: { "tipo_credito": "quirografario", "has_divergencia": true }

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userAgentId])
  @@index([templateType])
  @@index([confidence])
}

model RequestAudit {
  id               String       @id @default(cuid())
  sessionId        String       @unique
  userId           String?

  // Relacionamento unificado com o agente do usuário
  userAgentId      String

  fileName         String
  fileSize         Int
  fileMD5          String
  extractionMethod String
  documentType     String?
  totalTokens      Int          @default(0)
  totalDuration    Int          @default(0)
  cacheHit         Boolean      @default(false)
  qualityScore     Float?
  improved         Boolean      @default(false)
  success          Boolean
  errorMessage     String?

  // Métricas de aprendizado (novos)
  templatesUsed    Int?         // Quantos templates foram usados
  similarityScore  Float?       // Similaridade com modelos de treino (0-1)
  adaptationScore  Float?       // Quão bem adaptou ao caso (0-1)

  createdAt        DateTime     @default(now())
  processLogs      ProcessLog[]

  // Relacionamento unificado
  userAgent        UserAgent    @relation(fields: [userAgentId], references: [id])

  @@index([createdAt])
  @@index([userAgentId])
  @@index([success])
  @@index([sessionId])
}

model ProcessLog {
  id           String       @id @default(cuid())
  sessionId    String
  stage        String
  status       String
  startTime    DateTime     @default(now())
  endTime      DateTime?
  duration     Int?
  tokensUsed   Int?
  metadata     String?
  errorMessage String?
  createdAt    DateTime     @default(now())
  requestAudit RequestAudit @relation(fields: [sessionId], references: [sessionId])

  @@index([sessionId])
  @@index([stage])
  @@index([status])
  @@index([createdAt])
}

// Nova tabela: Sessões de geração (para iterações e refinamentos)
model LegalSession {
  id                   String             @id @default(cuid())
  userId               String?

  // Arquivo original
  fileMD5              String
  fileName             String
  fileSize             Int

  // Pipeline completo salvo (substitui cache volátil)
  extractedText        String             // Texto OCR completo (interno)
  documentAnalysis     String             // JSON: { type, parties, values, dates }
  chunks               String?            // JSON: chunks (nullable se doc pequeno)
  contextSummary       String?            // Resumo contextual

  // Dados do sistema multi-agente (opcional)
  multiAgentData       String?            // JSON: { analise, plano, avaliacoes, iteracoesRefinamento }

  // Configuração usada
  userAgentId          String
  documentType         String
  originalInstructions String

  // Contexto de aprendizado (novo)
  similarExamples      String?            // JSON: IDs dos TrainingDocuments similares
  appliedTemplates     String?            // JSON: Templates usados na geração
  contextVariables     String?            // JSON: Variáveis extraídas do caso

  // Resultado e histórico
  iterations           SessionIteration[]

  // Relacionamentos
  userAgent            UserAgent          @relation(fields: [userAgentId], references: [id])

  // Metadata
  status               String             @default("active") // active | archived
  createdAt            DateTime           @default(now())
  lastAccessedAt       DateTime           @default(now())

  @@index([userId])
  @@index([fileMD5])
  @@index([userAgentId])
  @@index([status])
  @@index([createdAt])
  @@index([lastAccessedAt])
}

// Nova tabela: Iterações de uma sessão (histórico de refinamentos)
model SessionIteration {
  id                String       @id @default(cuid())
  sessionId         String
  userPrompt        String       // Ex: "Melhore a fundamentação legal"
  result            String       // Texto gerado
  tokensUsed        Int
  parentIterationId String?      // Para bifurcações
  createdAt         DateTime     @default(now())
  session           LegalSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([createdAt])
  @@index([parentIterationId])
}
